jx$position
jx <- j[j$time == i,]
jx
jx$position <- sample(c(rep(1:96, 3))
jx$position <- sample(rep(1:96, 3))
jx$position <- sample(rep(1:96, 3))
jx$position <- sample(rep(1:96, 3))
rep(1:96, 3)
head(j)
head(dx)
dim(dx)
summary(dx)
dx$treatcode
tapply(dx$treatcode, dx$treatcode, length)
jx <- j[j$time == i,]
head(jx)
dim(jx)
208/3
206/3
205/3
204/3
68*3
2*2
jx$position <- sample(c(rep(1:68, 3), rep(69, 2), rep(70, 2)))
jx$position
c(rep(1:68, 3), rep(69, 2), rep(70, 2))
jx$position <- sample(c(rep(1:68, 3), rep(69, 2), rep(70, 2)))
jx$position
jx <- jx[order(jx$position),]
jx
jx$gen
jx$sp
tapply(jx$sp, jx$position, duplicated)
any(unlist(tapply(jx$sp, jx$position, duplicated))) & !(nrow(jx) <= 12 & nrow(jx) >= 3)
unlist(tapply(jx$sp, jx$position, duplicated)))
unlist(tapply(jx$sp, jx$position, duplicated))
nrow(jx)
nrow(jx) <= 12
nrow(jx) >= 3
nrow(jx) <= 12
!(nrow(jx) <= 12
!(nrow(jx) <= 12
!(nrow(jx) <= 12
!(nrow(jx) <= 12 & nrow(jx) >= 3)
!(nrow(jx) <= 12 & nrow(jx) >= 3)
!(nrow(jx) <= 12 & nrow(jx) >= 3)
!(nrow(jx) <= 12 & nrow(jx) >= 3)
noconspecs <- !unlist(lapply(tapply(jx$sp, jx$position, duplicated), function(x) any(x)))
noconspecs
noconspecs
jx2 <- rbind(jx2, jx[jx$position %in% names(noconspecs[noconspecs]),])#
		jx <- jx[jx$position %in% names(nocongens[!noconspecs]),]#
		jx$position <- sample(jx$position)
noconspecs <- !unlist(lapply(tapply(jx$sp, jx$position, duplicated), function(x) any(x)))
jx2 <- rbind(jx2, jx[jx$position %in% names(noconspecs[noconspecs]),])
jx2
jx2 <- vector() # to hold ones which do not have conspecifics in the beaker
jx2 <- rbind(jx2, jx[jx$position %in% names(noconspecs[noconspecs]),])
jx2
jx <- jx[jx$position %in% names(nocongens[!noconspecs]),]
jx
jx$position <- sample(jx$position)
jx <- jx[order(jx$position),]
head(jx)
jz <- vector()#
#
for(i in unique(j$time)){ # i = "time1" #
	jx <- j[j$time == i,]#
	# Randomize and make into sets of three; make sure to not have congeners in pairs.#
	# Positions: 1:68 as 3, then 69 and 70 with two each#
	jx$position <- sample(c(rep(1:68, 3), rep(69, 2), rep(70, 2)))#
	jx <- jx[order(jx$position),]#
#
	# Check to see if a pair has a congener. If so, repeat shuffling until no pairs#
	jx$gen <- substr(jx$sp, 1, 3)#
#
	jx2 <- vector() # to hold ones which do not have conspecifics in the beaker#
	while(any(unlist(tapply(jx$sp, jx$position, duplicated))) & !(nrow(jx) <= 12 & nrow(jx) >= 3)){#
		noconspecs <- !unlist(lapply(tapply(jx$sp, jx$position, duplicated), function(x) any(x)))#
#
		jx2 <- rbind(jx2, jx[jx$position %in% names(noconspecs[noconspecs]),])#
		jx <- jx[jx$position %in% names(nocongens[!noconspecs]),]#
		jx$position <- sample(jx$position)	#
		jx <- jx[order(jx$position),]#
		}#
	if(nrow(jx) > 0){ jx <- rbind(jx2, jx) } else { jx <- jx2 }#
	jx <- jx[order(jx$position),]#
	jz <- rbind(jz, jx)#
	}
jz <- vector()#
#
for(i in unique(j$time)){ # i = "time1" #
	jx <- j[j$time == i,]#
	# Randomize and make into sets of three; make sure to not have congeners in pairs.#
	# Positions: 1:68 as 3, then 69 and 70 with two each#
	jx$position <- sample(c(rep(1:68, 3), rep(69, 2), rep(70, 2)))#
	jx <- jx[order(jx$position),]#
#
	# Check to see if a pair has a congener. If so, repeat shuffling until no pairs#
	jx$gen <- substr(jx$sp, 1, 3)#
#
	jx2 <- vector() # to hold ones which do not have conspecifics in the beaker#
	while(any(unlist(tapply(jx$sp, jx$position, duplicated))) & !(nrow(jx) <= 12 & nrow(jx) >= 3)){#
		noconspecs <- !unlist(lapply(tapply(jx$sp, jx$position, duplicated), function(x) any(x)))#
#
		jx2 <- rbind(jx2, jx[jx$position %in% names(noconspecs[noconspecs]),])#
		jx <- jx[jx$position %in% names(noconspecs[!noconspecs]),]#
		jx$position <- sample(jx$position)	#
		jx <- jx[order(jx$position),]#
		}#
	if(nrow(jx) > 0){ jx <- rbind(jx2, jx) } else { jx <- jx2 }#
	jx <- jx[order(jx$position),]#
	jz <- rbind(jz, jx)#
	}
head(jz)
dim(jz)
dim(dx)
jz <- vector()#
#
for(i in unique(dx$time)){ # i = "time1" #
	jx <- dx[dx$time == i,]#
	# Randomize and make into sets of three; make sure to not have congeners in pairs.#
	# Positions: 1:68 as 3, then 69 and 70 with two each#
	jx$position <- sample(c(rep(1:68, 3), rep(69, 2), rep(70, 2)))#
	jx <- jx[order(jx$position),]#
#
	# Check to see if a pair has a congener. If so, repeat shuffling until no pairs#
	jx$gen <- substr(jx$sp, 1, 3)#
#
	jx2 <- vector() # to hold ones which do not have conspecifics in the beaker#
	while(any(unlist(tapply(jx$sp, jx$position, duplicated))) & !(nrow(jx) <= 12 & nrow(jx) >= 3)){#
		noconspecs <- !unlist(lapply(tapply(jx$sp, jx$position, duplicated), function(x) any(x)))#
#
		jx2 <- rbind(jx2, jx[jx$position %in% names(noconspecs[noconspecs]),])#
		jx <- jx[jx$position %in% names(noconspecs[!noconspecs]),]#
		jx$position <- sample(jx$position)	#
		jx <- jx[order(jx$position),]#
		}#
	if(nrow(jx) > 0){ jx <- rbind(jx2, jx) } else { jx <- jx2 }#
	jx <- jx[order(jx$position),]#
	jz <- rbind(jz, jx)#
	}
head(jz)
dim(jz)
dim(dx)
# Jan 2016 maps for twigs#
# Divide by chamber and time.#
#
jz <- vector()#
#
for(i in unique(dx$time)){ # i = "time1" #
	jx <- dx[dx$time == i,]#
	# Randomize and make into sets of three; make sure to not have congeners in pairs.#
	# Positions: 1:68 as 3, then 69 and 70 with two each#
	jx$position <- sample(c(rep(1:68, 3), rep(69, 2), rep(70, 2)))#
	jx <- jx[order(jx$position),]#
#
	# Check to see if a pair has a conspecific. If so, repeat shuffling until no pairs#
#
	jx2 <- vector() # to hold ones which do not have conspecifics in the beaker#
	while(any(unlist(tapply(jx$sp, jx$position, duplicated))) & !(nrow(jx) <= 12 & nrow(jx) >= 3)){#
		noconspecs <- !unlist(lapply(tapply(jx$sp, jx$position, duplicated), function(x) any(x)))#
#
		jx2 <- rbind(jx2, jx[jx$position %in% names(noconspecs[noconspecs]),])#
		jx <- jx[jx$position %in% names(noconspecs[!noconspecs]),]#
		jx$position <- sample(jx$position)	#
		jx <- jx[order(jx$position),]#
		}#
	if(nrow(jx) > 0){ jx <- rbind(jx2, jx) } else { jx <- jx2 }#
	jx <- jx[order(jx$position),]#
	jz <- rbind(jz, jx)#
	}
head(jz)
jz$row = rep(c(rep(sort(rep(1:8, 3)), 11), sort(rep(1:3, 3)), 4, 4), 4)#
jz$col = rep(c(gl(11, 8*3), rep(12, 3*3+2)), 4)
rep(1:8, 3)
rep(1:8, 3)
rep(1:8, 3)
sort(rep(1:8, 3))
head(dx)
rep(sort(rep(1:8, 3)), 9)
rep(sort(rep(1:8, 3)), 9)
length(rep(sort(rep(1:8, 3)), 9))
rep(sort(rep(1:8, 3)), 8)
jz$row = rep(c(rep(sort(rep(1:8, 3)), 8), sort(rep(1:4, 3)), 5, 5, 6, 6), 4)
jz$row
c(rep(sort(rep(1:8, 3)), 8), sort(rep(1:4, 3)), 5, 5, 6, 6)
dim(c(rep(sort(rep(1:8, 3)), 8), sort(rep(1:4, 3)), 5, 5, 6, 6))
length(c(rep(sort(rep(1:8, 3)), 8), sort(rep(1:4, 3)), 5, 5, 6, 6))
dim(dx)
nrow(dx)
nrow(dx)/3
jz$row = rep(c(rep(sort(rep(1:8, 3)), 8), sort(rep(1:4, 3)), 5, 5, 6, 6), 3)
jz$row = rep(c(rep(sort(rep(1:8, 3)), 8), sort(rep(1:4, 3)), 5, 5, 6, 6), 3)
3*3
jz$col = rep(c(rep(sort(rep(1:8, 3)), 8), sort(rep(9, 3*3+4)), 3)
jz$col = rep(c(rep(sort(rep(1:8, 3)), 8), sort(rep(9, 3*3+4))), 3)
jz$col = rep(c(rep(sort(rep(1:8, 3)), 8), sort(rep(9, 3*4+4))), 3)
jz$col
jz$row = rep(c(rep(sort(rep(1:8, 3)), 8), sort(rep(1:4, 3)), 5, 5, 6, 6), 3)
jz$row
head(jz)
tail(jz)
jz[1:50,]
jz[200:250,]
jz[300:350,]
write.csv(jz, paste("Budburst Twig Datasheet w Treatments ", Sys.Date(), ".csv", sep = ""), row.names=F)
# 70 positions. 8 rows, 9 columns
counter = 1
unique(jz$treatcode)
i = "1_1"
jx <- jz[jz$treatcode == i,]
mat <- matrix(nrow = 8, ncol = 9, byrow = T)
jx$position
unique(jx$position)
jx <- jz[jz$treatcode == i,]
unique(jx$position)
head(jx)
i = "1_1" #
	jx <- jz[jz$treatcode == i,]
head(jx)
head(jz)
i = "time1"
jx <- jz[jz$treatcode == i,]
jx <- jz[jz$treatcode == i,]
mat <- matrix(nrow = 8, ncol = 9, byrow = T)
mat
head(jx)
jx <- jz[jz$tim == i,]
jx <- jz[jz$time == i,]
jx
head(jx)
unique(jx$position)
k = 1
mat[k] = paste(jx[jx$position == k,"id"], collapse = "\t")
mat[k]
maplist
# Make maps.#
#
maplist <- list()#
#
# 70 positions. 8 rows, 9 columns#
#
counter = 1#
for(i in unique(jz$time)){ # i = "time1" #
	jx <- jz[jz$time == i,]#
	mat <- matrix(nrow = 8, ncol = 9, byrow = T)#
	for(k in unique(jx$position)){ # k = 1#
		mat[k] = paste(jx[jx$position == k,"id"], collapse = "\t")#
		}#
	maplist[[counter]] = mat#
	counter = counter + 1#
	}#
#
write.csv(maplist, "Mapschill.csv")
labvec <- vector()
jz$time
jx <- jz[jz$time == i,]
i = "time1"
jx <- jz[jz$time == i,]
unique(jx$position)
xx <- as.character(jx[jx$position == j,"id"])
xx
unique(jx$position)
j = 1
xx <- as.character(jx[jx$position == j,"id"])
xx
if(length(xx) == 1) xx <- c(xx, " ", " ")#
		if(length(xx) == 2) xx <- c(xx, " ")
xx <- c(xx, as.character(jx[jx$position == j,"treatcode"][1]))
xx
labvec <- vector()#
#
for(i in unique(jz$time)){ # i = "time1"#
	jx <- jz[jz$time == i,]#
	for(j in unique(jx$position)){ # j = 1#
		xx <- as.character(jx[jx$position == j,"id"])#
		if(length(xx) == 1) xx <- c(xx, " ", " ")#
		if(length(xx) == 2) xx <- c(xx, " ")#
		xx <- c(xx, as.character(jx[jx$position == j,"treatcode"][1]))#
		labvec <- rbind(labvec, xx)#
		}#
		}#
#
write.csv(labvec, "Design/Avery Labels 3per.csv", row.names = F)
# Creating maps and assigning treatments for Budburst experiment 2016#
#
# This script will assigns treatments and chamber locations for each cutting.#
setwd("~/Documents/git/budchill")#
#
library(gdata) # for read.xls#
d <- read.xls("~/Documents/git/budchill/Field Sampling Dec 2015.xlsx")#
#
allsp <- sort(unique(d[,"Species"]))#
#
# Vib cas: only 4 inds sampled, still use#
#
# Chilling treatment combinations#
chill <- gl(4, 3, labels = c("chill1", "chill2","chill4","chill8"))#
time <- gl(3, 1, length = 12, labels = c("time1", "time2","time3"))#
treatcode <- paste(substr(chill, 6, 6), substr(time, 5, 5), sep = "_") #
#
chilltreat <- data.frame(chill, time, treatcode)#
# Make twig-wise data frame. Assign treatments by individual, using chilltreat and nonchilltreat dataframes.#
#
dx <- vector()#
#
for(i in 1:nrow(d) ) { # i = 1#
	xx <- paste(d[i,"Individual"], formatC(1:12, width = 2, flag = "0"), sep = "_")#
#
	xx <- data.frame(xx)#
	xx$sp <- substr(xx[,1], 1, 6)#
	xx$rep <- substr(xx[,1], 7, 8)#
	xx$ind <- substr(xx[,1], 1, 8)#
	xx$twig <- substr(xx[,1], 13, 14)#
#
	names(xx)[1] = "id"#
#
	# Assign treatments. Randomize rows of treatment dataframes and apply to this individual#
	xx <- data.frame(xx, chilltreat[sample(1:nrow(chilltreat)),])#
#
	dx <- rbind(dx, xx)#
	}#
#
#write.csv(dx, paste("Budburst Twig Datasheet w Treatments ", Sys.Date(), ".csv", sep = ""), row.names=F)#
#
# <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>>#
# make maps. #
# <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>>#
#
# Jan 2016 maps for twigs#
# Divide by chamber and time.#
#
jz <- vector()#
#
for(i in unique(dx$time)){ # i = "time1" #
	jx <- dx[dx$time == i,]#
	# Randomize and make into sets of three; make sure to not have congeners in pairs.#
	# Positions: 1:68 as 3, then 69 and 70 with two each#
	jx$position <- sample(c(rep(1:68, 3), rep(69, 2), rep(70, 2)))#
	jx <- jx[order(jx$position),]#
#
	# Check to see if a pair has a conspecific. If so, repeat shuffling until no pairs#
#
	jx2 <- vector() # to hold ones which do not have conspecifics in the beaker#
	while(any(unlist(tapply(jx$sp, jx$position, duplicated))) & !(nrow(jx) <= 12 & nrow(jx) >= 3)){#
		noconspecs <- !unlist(lapply(tapply(jx$sp, jx$position, duplicated), function(x) any(x)))#
#
		jx2 <- rbind(jx2, jx[jx$position %in% names(noconspecs[noconspecs]),])#
		jx <- jx[jx$position %in% names(noconspecs[!noconspecs]),]#
		jx$position <- sample(jx$position)	#
		jx <- jx[order(jx$position),]#
		}#
	if(nrow(jx) > 0){ jx <- rbind(jx2, jx) } else { jx <- jx2 }#
	jx <- jx[order(jx$position),]#
	jz <- rbind(jz, jx)#
	}#
#
# Write it out. Important: if the script is re-run, will get different assignments of treatments! So only do this once.#
# Here using Sys.Date to prevent accidental overwriting of original csv.#
#
# Adding in row and column values for each twig. Now with 70 places, need 8 rows and 9 columns. #
jz$row = rep(c(rep(sort(rep(1:8, 3)), 8), sort(rep(1:4, 3)), 5, 5, 6, 6), 3)#
jz$col = rep(c(rep(sort(rep(1:8, 3)), 8), sort(rep(9, 3*4+4))), 3)#
#
# jz[1:100, c(1, 11:14)]#
#
write.csv(jz, paste("design/Budburst Twig Datasheet w Treatments ", Sys.Date(), ".csv", sep = ""), row.names=F)#
#
# Make maps.#
#
maplist <- list()#
#
# 70 positions. 8 rows, 9 columns#
#
counter = 1#
for(i in unique(jz$time)){ # i = "time1" #
	jx <- jz[jz$time == i,]#
	mat <- matrix(nrow = 8, ncol = 9, byrow = T)#
	for(k in unique(jx$position)){ # k = 1#
		mat[k] = paste(jx[jx$position == k,"id"], collapse = "\t")#
		}#
	maplist[[counter]] = mat#
	counter = counter + 1#
	}#
#
write.csv(maplist, "design/Mapschill.csv")#
##### Write out position-wise for labels#
#
labvec <- vector()#
#
for(i in unique(jz$time)){ # i = "time1"#
	jx <- jz[jz$time == i,]#
	for(j in unique(jx$position)){ # j = 1#
		xx <- as.character(jx[jx$position == j,"id"])#
		if(length(xx) == 1) xx <- c(xx, " ", " ")#
		if(length(xx) == 2) xx <- c(xx, " ")#
		xx <- c(xx, as.character(jx[jx$position == j,"treatcode"][1]))#
		labvec <- rbind(labvec, xx)#
		}#
		}#
#
write.csv(labvec, "design/Avery Labels 3per.csv", row.names = F)
# Creating maps and assigning treatments for Budburst experiment 2016#
#
# This script will assigns treatments and chamber locations for each cutting.#
setwd("~/Documents/git/budchill")#
#
library(gdata) # for read.xls#
d <- read.xls("~/Documents/git/budchill/Field Sampling Dec 2015.xlsx")#
#
allsp <- sort(unique(d[,"Species"]))#
#
# Vib cas: only 4 inds sampled, still use#
#
# Chilling treatment combinations#
chill <- gl(4, 3, labels = c("chill1", "chill2","chill4","chill8"))#
time <- gl(3, 1, length = 12, labels = c("time1", "time2","time3"))#
treatcode <- paste(substr(chill, 6, 6), substr(time, 5, 5), sep = "_") #
#
chilltreat <- data.frame(chill, time, treatcode)#
# Make twig-wise data frame. Assign treatments by individual, using chilltreat and nonchilltreat dataframes.#
#
dx <- vector()#
#
for(i in 1:nrow(d) ) { # i = 1#
	xx <- paste(d[i,"Individual"], formatC(1:12, width = 2, flag = "0"), sep = "_")#
#
	xx <- data.frame(xx)#
	xx$sp <- substr(xx[,1], 1, 6)#
	xx$rep <- substr(xx[,1], 7, 8)#
	xx$ind <- substr(xx[,1], 1, 8)#
	xx$twig <- substr(xx[,1], 13, 14)#
#
	names(xx)[1] = "id"#
#
	# Assign treatments. Randomize rows of treatment dataframes and apply to this individual#
	xx <- data.frame(xx, chilltreat[sample(1:nrow(chilltreat)),])#
#
	dx <- rbind(dx, xx)#
	}#
#
#write.csv(dx, paste("Budburst Twig Datasheet w Treatments ", Sys.Date(), ".csv", sep = ""), row.names=F)#
#
# <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>>#
# make maps. #
# <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>>#
#
# Jan 2016 maps for twigs#
# Divide by chamber and time.#
#
jz <- vector()#
#
for(i in unique(dx$time)){ # i = "time1" #
	jx <- dx[dx$time == i,]#
	# Randomize and make into sets of three; make sure to not have congeners in pairs.#
	# Positions: 1:68 as 3, then 69 and 70 with two each#
	jx$position <- sample(c(rep(1:68, 3), rep(69, 2), rep(70, 2)))#
	jx <- jx[order(jx$position),]#
#
	# Check to see if a pair has a conspecific. If so, repeat shuffling until no pairs#
#
	jx2 <- vector() # to hold ones which do not have conspecifics in the beaker#
	while(any(unlist(tapply(jx$sp, jx$position, duplicated))) & !(nrow(jx) <= 12 & nrow(jx) >= 3)){#
		noconspecs <- !unlist(lapply(tapply(jx$sp, jx$position, duplicated), function(x) any(x)))#
#
		jx2 <- rbind(jx2, jx[jx$position %in% names(noconspecs[noconspecs]),])#
		jx <- jx[jx$position %in% names(noconspecs[!noconspecs]),]#
		jx$position <- sample(jx$position)	#
		jx <- jx[order(jx$position),]#
		}#
	if(nrow(jx) > 0){ jx <- rbind(jx2, jx) } else { jx <- jx2 }#
	jx <- jx[order(jx$position),]#
	jz <- rbind(jz, jx)#
	}#
#
# Write it out. Important: if the script is re-run, will get different assignments of treatments! So only do this once.#
# Here using Sys.Date to prevent accidental overwriting of original csv.#
#
# Adding in row and column values for each twig. Now with 70 places, need 8 rows and 9 columns. #
jz$row = rep(c(rep(sort(rep(1:8, 3)), 8), sort(rep(1:4, 3)), 5, 5, 6, 6), 3)#
jz$col = rep(c(rep(sort(rep(1:8, 3)), 8), sort(rep(9, 3*4+4))), 3)#
#
# jz[1:100, c(1, 11:14)]#
#
write.csv(jz, paste("design/Budburst Twig Datasheet w Treatments ", Sys.Date(), ".csv", sep = ""), row.names=F)#
#
# Make maps.#
#
maplist <- list()#
#
# 70 positions. 8 rows, 9 columns#
#
counter = 1#
for(i in unique(jz$time)){ # i = "time1" #
	jx <- jz[jz$time == i,]#
	mat <- matrix(nrow = 8, ncol = 9, byrow = T)#
	for(k in unique(jx$position)){ # k = 1#
		mat[k] = paste(jx[jx$position == k,"id"], collapse = "\t")#
		}#
	maplist[[counter]] = mat#
	counter = counter + 1#
	}#
#
write.csv(maplist, "design/Mapschill.csv")#
##### Write out position-wise for labels#
#
labvec <- vector()#
#
for(i in unique(jz$time)){ # i = "time1"#
	jx <- jz[jz$time == i,]#
	for(j in unique(jx$position)){ # j = 1#
		xx <- as.character(jx[jx$position == j,"id"])#
		if(length(xx) == 1) xx <- c(xx, " ", " ")#
		if(length(xx) == 2) xx <- c(xx, " ")#
		xx <- c(xx, as.character(jx[jx$position == j,"treatcode"][1]))#
		labvec <- rbind(labvec, xx)#
		}#
		}#
#
write.csv(labvec, "design/Avery Labels 3per.csv", row.names = F)
# Creating maps and assigning treatments for Budburst experiment 2016#
#
# This script will assigns treatments and chamber locations for each cutting.#
setwd("~/Documents/git/budchill")#
#
library(gdata) # for read.xls#
d <- read.xls("~/Documents/git/budchill/Field Sampling Dec 2015.xlsx")#
#
allsp <- sort(unique(d[,"Species"]))#
#
# Vib cas: only 4 inds sampled, still use#
#
# Chilling treatment combinations#
chill <- gl(4, 3, labels = c("chill1", "chill2","chill4","chill8"))#
time <- gl(3, 1, length = 12, labels = c("time1", "time2","time3"))#
treatcode <- paste(substr(chill, 6, 6), substr(time, 5, 5), sep = "_") #
#
chilltreat <- data.frame(chill, time, treatcode)#
# Make twig-wise data frame. Assign treatments by individual, using chilltreat and nonchilltreat dataframes.#
#
dx <- vector()#
#
for(i in 1:nrow(d) ) { # i = 1#
	xx <- paste(d[i,"Individual"], formatC(1:12, width = 2, flag = "0"), sep = "_")#
#
	xx <- data.frame(xx)#
	xx$sp <- substr(xx[,1], 1, 6)#
	xx$rep <- substr(xx[,1], 7, 8)#
	xx$ind <- substr(xx[,1], 1, 8)#
	xx$twig <- substr(xx[,1], 13, 14)#
#
	names(xx)[1] = "id"#
#
	# Assign treatments. Randomize rows of treatment dataframes and apply to this individual#
	xx <- data.frame(xx, chilltreat[sample(1:nrow(chilltreat)),])#
#
	dx <- rbind(dx, xx)#
	}#
#
#write.csv(dx, paste("Budburst Twig Datasheet w Treatments ", Sys.Date(), ".csv", sep = ""), row.names=F)#
#
# <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>>#
# make maps. #
# <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>>#
#
# Jan 2016 maps for twigs#
# Divide by chamber and time.#
#
jz <- vector()#
#
for(i in unique(dx$time)){ # i = "time1" #
	jx <- dx[dx$time == i,]#
	# Randomize and make into sets of three; make sure to not have congeners in pairs.#
	# Positions: 1:68 as 3, then 69 and 70 with two each#
	jx$position <- sample(c(rep(1:68, 3), rep(69, 2), rep(70, 2)))#
	jx <- jx[order(jx$position),]#
#
	# Check to see if a pair has a conspecific. If so, repeat shuffling until no pairs#
#
	jx2 <- vector() # to hold ones which do not have conspecifics in the beaker#
	while(any(unlist(tapply(jx$sp, jx$position, duplicated))) & !(nrow(jx) <= 12 & nrow(jx) >= 3)){#
		noconspecs <- !unlist(lapply(tapply(jx$sp, jx$position, duplicated), function(x) any(x)))#
#
		jx2 <- rbind(jx2, jx[jx$position %in% names(noconspecs[noconspecs]),])#
		jx <- jx[jx$position %in% names(noconspecs[!noconspecs]),]#
		jx$position <- sample(jx$position)	#
		jx <- jx[order(jx$position),]#
		}#
	if(nrow(jx) > 0){ jx <- rbind(jx2, jx) } else { jx <- jx2 }#
	jx <- jx[order(jx$position),]#
	jz <- rbind(jz, jx)#
	}#
#
# Write it out. Important: if the script is re-run, will get different assignments of treatments! So only do this once.#
# Here using Sys.Date to prevent accidental overwriting of original csv.#
#
# Adding in row and column values for each twig. Now with 70 places, need 8 rows and 9 columns. #
jz$row = rep(c(rep(sort(rep(1:8, 3)), 8), sort(rep(1:4, 3)), 5, 5, 6, 6), 3)#
jz$col = rep(c(rep(sort(rep(1:8, 3)), 8), sort(rep(9, 3*4+4))), 3)#
#
# jz[1:100, c(1, 11:14)]#
#
write.csv(jz, paste("design/Budburst Twig Datasheet w Treatments ", Sys.Date(), ".csv", sep = ""), row.names=F)#
#
# Make maps.#
#
maplist <- list()#
#
# 70 positions. 8 rows, 9 columns#
#
counter = 1#
for(i in unique(jz$time)){ # i = "time1" #
	jx <- jz[jz$time == i,]#
	mat <- matrix(nrow = 8, ncol = 9, byrow = T)#
	for(k in unique(jx$position)){ # k = 1#
		mat[k] = paste(jx[jx$position == k,"id"], collapse = "\t")#
		}#
	maplist[[counter]] = mat#
	counter = counter + 1#
	}#
#
write.csv(maplist, "design/Mapschill.csv")#
##### Write out position-wise for labels#
#
labvec <- vector()#
#
for(i in unique(jz$time)){ # i = "time1"#
	jx <- jz[jz$time == i,]#
	for(j in unique(jx$position)){ # j = 1#
		xx <- as.character(jx[jx$position == j,"id"])#
		if(length(xx) == 1) xx <- c(xx, " ", " ")#
		if(length(xx) == 2) xx <- c(xx, " ")#
		xx <- c(xx, as.character(jx[jx$position == j,"treatcode"][1]))#
		labvec <- rbind(labvec, xx)#
		}#
		}#
#
write.csv(labvec, "design/Avery Labels 3per.csv", row.names = F)
# Creating maps and assigning treatments for Budburst experiment 2016#
#
# This script will assigns treatments and chamber locations for each cutting.#
setwd("~/Documents/git/budchill")#
#
library(gdata) # for read.xls#
d <- read.xls("~/Documents/git/budchill/Field Sampling Dec 2015.xlsx")#
#
allsp <- sort(unique(d[,"Species"]))#
#
# Vib cas: only 4 inds sampled, still use#
#
# Chilling treatment combinations#
chill <- gl(4, 3, labels = c("chill1", "chill2","chill4","chill8"))#
time <- gl(3, 1, length = 12, labels = c("time1", "time2","time3"))#
treatcode <- paste(substr(chill, 6, 6), substr(time, 5, 5), sep = "_") #
#
chilltreat <- data.frame(chill, time, treatcode)#
# Make twig-wise data frame. Assign treatments by individual, using chilltreat and nonchilltreat dataframes.#
#
dx <- vector()#
#
for(i in 1:nrow(d) ) { # i = 1#
	xx <- paste(d[i,"Individual"], formatC(1:12, width = 2, flag = "0"), sep = "_")#
#
	xx <- data.frame(xx)#
	xx$sp <- substr(xx[,1], 1, 6)#
	xx$rep <- substr(xx[,1], 7, 8)#
	xx$ind <- substr(xx[,1], 1, 8)#
	xx$twig <- substr(xx[,1], 13, 14)#
#
	names(xx)[1] = "id"#
#
	# Assign treatments. Randomize rows of treatment dataframes and apply to this individual#
	xx <- data.frame(xx, chilltreat[sample(1:nrow(chilltreat)),])#
#
	dx <- rbind(dx, xx)#
	}#
#
#write.csv(dx, paste("Budburst Twig Datasheet w Treatments ", Sys.Date(), ".csv", sep = ""), row.names=F)#
#
# <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>>#
# make maps. #
# <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>>#
#
# Jan 2016 maps for twigs#
# Divide by chill treatment
jz <- vector()
dx$chill
i = "chill1"
jx <- dx[dx$chill == i,]
# Positions: 1:68 as 3, then 69 and 70 with two each#
	jx$position <- sample(c(rep(1:68, 3), rep(69, 2), rep(70, 2)))
jx <- dx[dx$chill == i,]
jx
dim(jx)
156/3
jx$position <- sample(rep(1:52, 3))
jx <- jx[order(jx$position),]
any(unlist(tapply(jx$sp, jx$position, duplicated))) & !(nrow(jx) <= 12 & nrow(jx) >= 3)
noconspecs <- !unlist(lapply(tapply(jx$sp, jx$position, duplicated), function(x) any(x)))
jx2 <- rbind(jx2, jx[jx$position %in% names(noconspecs[noconspecs]),])#
		jx <- jx[jx$position %in% names(noconspecs[!noconspecs]),]#
		jx$position <- sample(jx$position)
jx <- jx[order(jx$position),]
jx
jz$row = rep(c(rep(sort(rep(1:8, 3)), 5), sort(rep(1:4, 3))), 4)
jz$row = rep(c(rep(sort(rep(1:8, 3)), 5), sort(rep(1:4, 3))), 4)
jz$row
# Creating maps and assigning treatments for Budburst experiment 2016#
#
# This script will assigns treatments and chamber locations for each cutting.#
setwd("~/Documents/git/budchill")#
#
library(gdata) # for read.xls#
d <- read.xls("~/Documents/git/budchill/Field Sampling Dec 2015.xlsx")#
#
allsp <- sort(unique(d[,"Species"]))#
#
# Vib cas: only 4 inds sampled, still use#
#
# Chilling treatment combinations#
chill <- gl(4, 3, labels = c("chill1", "chill2","chill4","chill8"))#
time <- gl(3, 1, length = 12, labels = c("time1", "time2","time3"))#
treatcode <- paste(substr(chill, 6, 6), substr(time, 5, 5), sep = "_") #
#
chilltreat <- data.frame(chill, time, treatcode)#
# Make twig-wise data frame. Assign treatments by individual, using chilltreat and nonchilltreat dataframes.#
#
dx <- vector()#
#
for(i in 1:nrow(d) ) { # i = 1#
	xx <- paste(d[i,"Individual"], formatC(1:12, width = 2, flag = "0"), sep = "_")#
#
	xx <- data.frame(xx)#
	xx$sp <- substr(xx[,1], 1, 6)#
	xx$rep <- substr(xx[,1], 7, 8)#
	xx$ind <- substr(xx[,1], 1, 8)#
	xx$twig <- substr(xx[,1], 13, 14)#
#
	names(xx)[1] = "id"#
#
	# Assign treatments. Randomize rows of treatment dataframes and apply to this individual#
	xx <- data.frame(xx, chilltreat[sample(1:nrow(chilltreat)),])#
#
	dx <- rbind(dx, xx)#
	}#
#
#write.csv(dx, paste("Budburst Twig Datasheet w Treatments ", Sys.Date(), ".csv", sep = ""), row.names=F)#
#
# <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>>#
# make maps. #
# <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>>#
#
# Jan 2016 maps for twigs#
# Divide by chill treatment.#
#
jz <- vector()#
#
for(i in unique(dx$chill)){ # i = "chill1" #
	jx <- dx[dx$chill == i,]#
	# Randomize and make into sets of three; make sure to not have congeners in pairs.#
	# Positions: 52#
	jx$position <- sample(rep(1:52, 3))#
	jx <- jx[order(jx$position),]#
#
	# Check to see if a pair has a conspecific. If so, repeat shuffling until no pairs#
#
	jx2 <- vector() # to hold ones which do not have conspecifics in the beaker#
	while(any(unlist(tapply(jx$sp, jx$position, duplicated))) & !(nrow(jx) <= 12 & nrow(jx) >= 3)){#
		noconspecs <- !unlist(lapply(tapply(jx$sp, jx$position, duplicated), function(x) any(x)))#
#
		jx2 <- rbind(jx2, jx[jx$position %in% names(noconspecs[noconspecs]),])#
		jx <- jx[jx$position %in% names(noconspecs[!noconspecs]),]#
		jx$position <- sample(jx$position)	#
		jx <- jx[order(jx$position),]#
		}#
	if(nrow(jx) > 0){ jx <- rbind(jx2, jx) } else { jx <- jx2 }#
	jx <- jx[order(jx$position),]#
	jz <- rbind(jz, jx)#
	}#
#
# Write it out. Important: if the script is re-run, will get different assignments of treatments! So only do this once.#
# Here using Sys.Date to prevent accidental overwriting of original csv.
head(jz)
dim(jz)
tail(jz)
jz$row = rep(c(rep(sort(rep(1:8, 3)), 5), sort(rep(1:4, 3))), 4)
c(rep(sort(rep(1:8, 3)), 5), sort(rep(1:4, 3)))
length(c(rep(sort(rep(1:8, 3)), 5), sort(rep(1:4, 3))))
dim(jx)
jz$row = rep(c(rep(sort(rep(1:8, 3)), 6), sort(rep(1:4, 3))), 4)
# Creating maps and assigning treatments for Budburst experiment 2016#
#
# This script will assigns treatments and chamber locations for each cutting.#
setwd("~/Documents/git/budchill")#
#
library(gdata) # for read.xls#
d <- read.xls("~/Documents/git/budchill/Field Sampling Dec 2015.xlsx")#
#
allsp <- sort(unique(d[,"Species"]))#
#
# Vib cas: only 4 inds sampled, still use#
#
# Chilling treatment combinations#
chill <- gl(4, 3, labels = c("chill1", "chill2","chill4","chill8"))#
time <- gl(3, 1, length = 12, labels = c("time1", "time2","time3"))#
treatcode <- paste(substr(chill, 6, 6), substr(time, 5, 5), sep = "_") #
#
chilltreat <- data.frame(chill, time, treatcode)#
# Make twig-wise data frame. Assign treatments by individual, using chilltreat and nonchilltreat dataframes.#
#
dx <- vector()#
#
for(i in 1:nrow(d) ) { # i = 1#
	xx <- paste(d[i,"Individual"], formatC(1:12, width = 2, flag = "0"), sep = "_")#
#
	xx <- data.frame(xx)#
	xx$sp <- substr(xx[,1], 1, 6)#
	xx$rep <- substr(xx[,1], 7, 8)#
	xx$ind <- substr(xx[,1], 1, 8)#
	xx$twig <- substr(xx[,1], 13, 14)#
#
	names(xx)[1] = "id"#
#
	# Assign treatments. Randomize rows of treatment dataframes and apply to this individual#
	xx <- data.frame(xx, chilltreat[sample(1:nrow(chilltreat)),])#
#
	dx <- rbind(dx, xx)#
	}#
#
#write.csv(dx, paste("Budburst Twig Datasheet w Treatments ", Sys.Date(), ".csv", sep = ""), row.names=F)#
#
# <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>>#
# make maps. #
# <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>> <<>>#
#
# Jan 2016 maps for twigs#
# Divide by chill treatment.#
#
jz <- vector()#
#
for(i in unique(dx$chill)){ # i = "chill1" #
	jx <- dx[dx$chill == i,]#
	# Randomize and make into sets of three; make sure to not have congeners in pairs.#
	# Positions: 52#
	jx$position <- sample(rep(1:52, 3))#
	jx <- jx[order(jx$position),]#
#
	# Check to see if a pair has a conspecific. If so, repeat shuffling until no pairs#
#
	jx2 <- vector() # to hold ones which do not have conspecifics in the beaker#
	while(any(unlist(tapply(jx$sp, jx$position, duplicated))) & !(nrow(jx) <= 12 & nrow(jx) >= 3)){#
		noconspecs <- !unlist(lapply(tapply(jx$sp, jx$position, duplicated), function(x) any(x)))#
#
		jx2 <- rbind(jx2, jx[jx$position %in% names(noconspecs[noconspecs]),])#
		jx <- jx[jx$position %in% names(noconspecs[!noconspecs]),]#
		jx$position <- sample(jx$position)	#
		jx <- jx[order(jx$position),]#
		}#
	if(nrow(jx) > 0){ jx <- rbind(jx2, jx) } else { jx <- jx2 }#
	jx <- jx[order(jx$position),]#
	jz <- rbind(jz, jx)#
	}#
#
# Write it out. Important: if the script is re-run, will get different assignments of treatments! So only do this once.#
# Here using Sys.Date to prevent accidental overwriting of original csv.#
#
# Adding in row and column values for each twig. Now with 52 places, need 8 rows and 9 columns. #
jz$row = rep(c(rep(sort(rep(1:8, 3)), 6), sort(rep(1:4, 3))), 4)
jz$row
jz$col = rep(c(rep(sort(rep(1:8, 3)), 6), sort(rep(7, 3*4))), 4)
jz$col
jz[1:100, c(1, 11:14)]
# jz[1:100, ]
jz[1:100, ]
rep(c(rep(sort(rep(1:8, 3)), 6), sort(rep(1:4, 3))), 4)
jz$row = sort(rep(c(rep(sort(rep(1:8, 3)), 6), sort(rep(1:4, 3))), 4))
jz[1:100, ]
c(rep(sort(rep(1:8, 3)), 6), sort(rep(1:4, 3)))
c(rep(sort(rep(1:8, 3)), 6)
rep(sort(rep(1:8, 3)), 6)
rep(sort(rep(1:8, 3)), 6)
jz$row = rep(sort(c(rep(sort(rep(1:8, 3)), 6), sort(rep(1:4, 3)))), 4)
jz$row
jz[1:100, ]
jz[100:200, ]
jz$row = rep(c(rep(sort(rep(1:8, 3)), 6), sort(rep(1:4, 3))), 4)
jz$row
c(rep(sort(rep(1:6, 3)), 6)
rep(sort(rep(1:6, 3)), 6)
rep(sort(rep(1:6, 3)), 6)
rep(1:6, 3)
jz$row = rep(c(rep(sort(rep(1:8, 3)), 6), sort(rep(1:4, 3))), 4)
rep(7, 3*4)
sort( c( rep(rep(1:6, 3), 6), rep(7, 3*4) ) )
jz$col = rep( sort( c( rep(rep(1:6, 3), 6), rep(7, 3*4) ) ), 4)
sort( c( rep(rep(1:6, 3), 6), rep(7, 3*4) ) )
jz$row = rep(c(rep(sort(rep(1:8, 3)), 6), sort(rep(1:4, 3))), 4)
jz$row
length(jz$row)
sort( c( rep(rep(1:6, 3), 6), rep(7, 3*4) ) )
length(sort( c( rep(rep(1:6, 3), 6), rep(7, 3*4) ) ))
length(sort( c( rep(rep(1:6, 3), 6), rep(7, 3*4) ) ))*4
624/4
jz$col = rep( c( rep(rep(1:7, 3), 4), rep(rep(1:6, 3), 4), 4)
)
)
jz$col = rep( c( rep(rep(1:7, 3), 4), rep(rep(1:6, 3), 4)) , 4)
jz$row = rep(c(rep(sort(rep(1:8, 3)), 6), sort(rep(1:4, 3))), 4)#
jz$col = rep( c( rep(rep(1:7, 3), 4), rep(rep(1:6, 3), 4)) , 4)
jz[1:100, ]
jz$col = rep( sort( c( rep(rep(1:7, 3), 4), rep(rep(1:6, 3), 4) ) ) , 4)
jz[1:100, ]
jz[100:200, ]
write.csv(jz, paste("design/Budburst Twig Datasheet w Treatments ", Sys.Date(), ".csv", sep = ""), row.names=F)
maplist <- list()
counter = 1
# 52 positions. 8 rows, 7 columns (last 4 cells of 7th col blank)
maplist <- list()
counter = 1
i = "chill1"
jx <- jz[jz$chill == i,]
mat <- matrix(nrow = 8, ncol = 7, byrow = T)
k = 1
unique(jx$position)
mat[k] = paste(jx[jx$position == k,"id"], collapse = "\t")
mat[k]
maplist <- list()#
#
# 52 positions. 8 rows, 7 columns (last 4 cells of 7th col blank)#
#
counter = 1#
for(i in unique(jz$chill)){ # i = "chill1" #
	jx <- jz[jz$chill == i,]#
	mat <- matrix(nrow = 8, ncol = 7, byrow = T)#
	for(k in unique(jx$position)){ # k = 1#
		mat[k] = paste(jx[jx$position == k,"id"], collapse = "\t")#
		}#
	maplist[[counter]] = mat#
	counter = counter + 1#
	}#
#
write.csv(maplist, "design/Mapschill.csv")
labvec <- vector()
i = "chill1"
jx <- jz[jz$chill == i,]
for(j in unique(jx$position)){ # j = 1#
		xx <- as.character(jx[jx$position == j,"id"])#
		if(length(xx) == 1) xx <- c(xx, " ", " ")#
		if(length(xx) == 2) xx <- c(xx, " ")#
		xx <- c(xx, as.character(jx[jx$position == j,"treatcode"][1]))#
		labvec <- rbind(labvec, xx)#
		}
labvec <- vector()#
#
for(i in unique(jz$chill)){ # i = "chill1"#
	jx <- jz[jz$chill == i,]#
	for(j in unique(jx$position)){ # j = 1#
		xx <- as.character(jx[jx$position == j,"id"])#
		if(length(xx) == 1) xx <- c(xx, " ", " ")#
		if(length(xx) == 2) xx <- c(xx, " ")#
		xx <- c(xx, as.character(jx[jx$position == j,"treatcode"][1]))#
		labvec <- rbind(labvec, xx)#
		}#
		}
labvec
write.csv(labvec, "design/Avery Labels 3per.csv", row.names = F)
