bdm.sp <- paste(bdm$Genus, bdm$Species.aggregate)
bdm.sp
bdm.sp <- sub(" s.l.", "", bdm.sp)
bdm.sp
bdm.sp <- sub(" agg.", "", bdm.sp)
eyster$Species
# Harold Eyster plant list checking#
#
library(gdata)#
#
eyster <- read.xls("~/Dropbox/Work/Harvard/Wolkovich Lab/Eyester/Eyster_Plantlist_5-11.xlsx")
eyster$Species
library(gdata)#
#
eyster <- read.xls("~/Dropbox/Work/Harvard/Wolkovich Lab/Eyester/Eyster_Plantlist_5-11.xlsx")
eyster$Species
?read.csv
eyster <- read.xls("~/Dropbox/Work/Harvard/Wolkovich Lab/Eyester/Eyster_Plantlist_5-11.xlsx", as.is=T)
eyster
eyster$Species
library(gdata)#
#
eyster <- read.xls("~/Dropbox/Work/Harvard/Wolkovich Lab/Eyester/Eyster_Plantlist_5-11.xlsx", as.is=T)
eyster$Species
match(bdm.sp, eyster$Species)
match(eyster$Species, bdm.sp)
bdm.sp[match(eyster$Species, bdm.sp)]
data.frame(eyster, bdm.sp[match(eyster$Species, bdm.sp)])
nomatch <- eyster$Species[is.na(match(eyster$Species, bdm.sp))]
nomatch
nomatch <- eyster$Species[is.na(match(eyster$Species, bdm.sp))]
nomatch
bdm.sp[match(eyster$Species, bdm.sp)]
eyster$Species[is.na(match(eyster$Species, bdm.sp))]
nomatch
bdm[grep("Lythrum", bdm.sp),]
grep("Lythrum", bdm.sp)
bdm[grep("Lythrum salicaria", bdm.sp),]
grep("Lythrum salicaria", bdm.sp)
bdm.sp
bdm.sp <- paste(bdm$Genus, bdm$Species.aggregate)#
bdm.sp <- sub(" s.l.+$", "", bdm.sp)
bdm[grep("Lythrum salicaria", bdm.sp),]
bdm.sp
bdm.sp <- paste(bdm$Genus, bdm$Species.aggregate)#
#bdm.sp <- sub(" s.l.+$", "", bdm.sp)#
bdm.sp <- sub(" agg.", "", bdm.sp)
bdm[grep("Lythrum salicaria", bdm.sp),]
nomatch <- eyster$Species[is.na(match(eyster$Species, bdm.sp))]
nomatch
data.frame(eyster, bdm.sp[match(eyster$Species, bdm.sp)])
library(gdata)#
d <- read.xls("~/Dropbox/Work/Harvard/Farm and Forest/HF Tree Traits 2015-06-09.xlsx")
head(d)
summary(d)
d$Summer.2015.Route
d <- d[d$Summer.2015.Route != "",]
d$Summer.2015.Route
names(d)
table(d$Species)
# HF tree traits summary#
library(gdata)#
d <- read.xls("~/Dropbox/Work/Harvard/Farm and Forest/HF Tree Traits 2015-06-09.xlsx")#
summary(d)#
#
d <- d[d$Summer.2015.Route != "",]#
#
table(d$Species)
sort(table(d$Species), T)
dt <- table(d$Species)
dt[dt<4]
head(d)
SpeciesList <- unique(d$Species)
SpeciesList
length(SpeciesList)
letters["c"]
letter["c"]
letters
which(letters=="c")
which(letters=="c")-which(letters==
"u
")
which(letters=="c")-which(letters=="u")
which(letters=="u")-which(letters=="c")
which(letters=="u")-which(letters=="a")
library(FD)
dbFD
example(dbFD)
library(FD)
source("FD_Calculators.R")#
library(FD)#
# Simulate traits
traits <- data.frame(rnorm(10), sort(rnorm(10)), sort(rnorm(10),T))#
rownames(traits) <- letters[1:10]#
colnames(traits) <- make.names(paste("Trait", 1:3))#
#
# Simulate community #
#
community <- data.frame(rlnorm(10, 3), rep(NA,10))#
rownames(community) <- letters[1:10]#
colnames(community) <- c("Real", "Empty")#
#
realFD <- Calculate.FD(community, traits, scale = F)#
#
plot(as.dendrogram(hclust(dist(traits))))#
#
# more meaningful example#
#
community <- data.frame(sample(c(NA,1), 10, T), sample(c(NA,1), 10, T), sample(c(NA,1), 10, T), c(1, rep(NA,9)))#
rownames(community) <- letters[1:10]
dbFD(traits, community, calc.FGR=T)
traits
community
head(dummy)
dbFD(traits, t(community), calc.FGR=T)
FGR.post <- dbFD(traits, t(community), calc.FGR=T)
FGR.post
t(community)
community
community <- data.frame(rlnorm(10, 3), rep(NA,10))#
rownames(community) <- letters[1:10]#
colnames(community) <- c("Real", "Empty")
community
# FD calculation example using simulated data.#
# First run or source FD_Calculators.R#
#
source("FD_Calculators.R")#
library(FD)#
# Simulate traits#
#
traits <- data.frame(rnorm(10), sort(rnorm(10)), sort(rnorm(10),T))#
rownames(traits) <- letters[1:10]#
colnames(traits) <- make.names(paste("Trait", 1:3))#
#
# Simulate community #
#
community <- data.frame(rlnorm(10, 3), rep(NA,10))#
rownames(community) <- letters[1:10]#
colnames(community) <- c("Real", "Empty")#
#
realFD <- Calculate.FD(community, traits, scale = F)
community
community <- data.frame(sample(c(NA,1), 10, T), sample(c(NA,1), 10, T), sample(c(NA,1), 10, T), c(1, rep(NA,9)))
rownames(community) <- letters[1:10]#
colnames(community) <- make.names(paste("Community", 1:4))
community
community$Community.5 <- c(NA,NA,1,1,NA,NA,NA,NA,NA,NA)
community
t(community)
FGR.post <- dbFD(traits, t(community), calc.FGR=T)
FGR.post
# Now simlate FD for genereting expected values for a certain number of species, for comparison with "real" observed values.#
#
runs = 1000#
results = matrix(nrow=runs, ncol=3)#
#
for(j in 1:runs){#
#
	community.random <- matrix(NA, nrow = 10, ncol = 3)#
	for(i in 1:3){#
		community.random[,i] <- sample(community[,i], 10, replace = F)#
		}	#
#
	rownames(community.random) <- letters[1:10]#
	colnames(community.random) <- make.names(paste("Community", 1:3))#
#
	results[j,] <- Calculate.FD(community.random, traits, scale=F)#
#
}#
#
# Red line shows observed value, histogram for expected values.#
#
par(mfrow=c(3,1))#
hist(results[,1], xlim = c(0, 15))#
abline(v = realFD[1], col = "red")#
#
hist(results[,2], xlim = c(0, 15))#
abline(v = realFD[2], col = "red")#
#
hist(results[,3], xlim = c(0, 15))#
abline(v = realFD[3], col = "red")
# FD calculation example using simulated data.#
# First run or source FD_Calculators.R#
#
source("FD_Calculators.R")#
library(FD)#
# Simulate traits#
#
traits <- data.frame(rnorm(10), sort(rnorm(10)), sort(rnorm(10),T))#
rownames(traits) <- letters[1:10]#
colnames(traits) <- make.names(paste("Trait", 1:3))#
#
# Simulate community #
#
community <- data.frame(rlnorm(10, 3), rep(NA,10))#
rownames(community) <- letters[1:10]#
colnames(community) <- c("Real", "Empty")#
#
realFD <- Calculate.FD(community, traits, scale = F)#
#
plot(as.dendrogram(hclust(dist(traits))))#
#
# more meaningful example#
#
community <- data.frame(sample(c(NA,1), 10, T), sample(c(NA,1), 10, T), sample(c(NA,1), 10, T), c(1, rep(NA,9)))#
rownames(community) <- letters[1:10]#
colnames(community) <- make.names(paste("Community", 1:4))#
#
community$Community.5 <- c(NA,NA,1,1,NA,NA,NA,NA,NA,NA) #
#
realFD <- Calculate.FD(community, traits, scale = F)#
#
(FGR.post <- dbFD(traits, t(community), calc.FGR=T))#
#
plot(as.dendrogram(hclust(dist(traits))))#
#
# Now simlate FD for genereting expected values for a certain number of species, for comparison with "real" observed values.#
#
runs = 1000#
results = matrix(nrow=runs, ncol=3)#
#
for(j in 1:runs){#
#
	community.random <- matrix(NA, nrow = 10, ncol = 3)#
	for(i in 1:3){#
		community.random[,i] <- sample(community[,i], 10, replace = F)#
		}	#
#
	rownames(community.random) <- letters[1:10]#
	colnames(community.random) <- make.names(paste("Community", 1:3))#
#
	results[j,] <- Calculate.FD(community.random, traits, scale=F)#
#
}#
#
# Red line shows observed value, histogram for expected values.#
#
par(mfrow=c(3,1))#
hist(results[,1], xlim = c(0, 15))#
abline(v = realFD[1], col = "red")#
#
hist(results[,2], xlim = c(0, 15))#
abline(v = realFD[2], col = "red")#
#
hist(results[,3], xlim = c(0, 15))#
abline(v = realFD[3], col = "red")
# FD calculation example using simulated data.#
# First run or source FD_Calculators.R#
#
source("FD_Calculators.R")#
library(FD)#
# Simulate traits#
#
traits <- data.frame(rnorm(10), sort(rnorm(10)), sort(rnorm(10),T))#
rownames(traits) <- letters[1:10]#
colnames(traits) <- make.names(paste("Trait", 1:3))#
#
# Simulate community #
#
community <- data.frame(rlnorm(10, 3), rep(NA,10))#
rownames(community) <- letters[1:10]#
colnames(community) <- c("Real", "Empty")#
#
realFD <- Calculate.FD(community, traits, scale = F)#
#
plot(as.dendrogram(hclust(dist(traits))))#
#
# more meaningful example#
#
community <- data.frame(sample(c(NA,1), 10, T), sample(c(NA,1), 10, T), sample(c(NA,1), 10, T), c(1, rep(NA,9)))#
rownames(community) <- letters[1:10]#
colnames(community) <- make.names(paste("Community", 1:4))#
#
community$Community.5 <- c(NA,NA,1,1,NA,NA,NA,NA,NA,NA) #
#
realFD <- Calculate.FD(community, traits, scale = F)#
#
(FGR.post <- dbFD(traits, t(community), calc.FGR=T))#
#
plot(as.dendrogram(hclust(dist(traits))))#
#
# Now simlate FD for genereting expected values for a certain number of species, for comparison with "real" observed values.
# FD calculation example using simulated data.#
# First run or source FD_Calculators.R#
#
source("FD_Calculators.R")#
library(FD)#
# Simulate traits#
#
traits <- data.frame(rnorm(10), sort(rnorm(10)), sort(rnorm(10),T))#
rownames(traits) <- letters[1:10]#
colnames(traits) <- make.names(paste("Trait", 1:3))#
#
# Simulate community #
#
community <- data.frame(rlnorm(10, 3), rep(NA,10))#
rownames(community) <- letters[1:10]#
colnames(community) <- c("Real", "Empty")#
#
realFD <- Calculate.FD(community, traits, scale = F)#
#
plot(as.dendrogram(hclust(dist(traits))))#
#
# more meaningful example#
#
community <- data.frame(sample(c(NA,1), 10, T), sample(c(NA,1), 10, T), sample(c(NA,1), 10, T), c(1, rep(NA,9)))
rownames(community) <- letters[1:10]#
colnames(community) <- make.names(paste("Community", 1:4))
community$Community.5 <- c(NA,NA,1,1,NA,NA,NA,NA,NA,NA)
realFD <- Calculate.FD(community, traits, scale = F)
source('~/Dropbox/Work/FD R commands/FD_Calculators.R', chdir = TRUE)
realFD <- Calculate.FD(community, traits, scale = F)
realFD <- Calculate.FD(community, traits, scale = F) # 'real' as opposed to bootstrapped
plot(as.dendrogram(hclust(dist(traits))))#
#
# more meaningful example#
#
community <- data.frame(sample(c(NA,1), 10, T), sample(c(NA,1), 10, T), sample(c(NA,1), 10, T), c(1, rep(NA,9)))#
rownames(community) <- letters[1:10]#
colnames(community) <- make.names(paste("Community", 1:4))#
#
community$Community.5 <- c(NA,NA,1,1,NA,NA,NA,NA,NA,NA) #
#
realFD <- Calculate.FD(community, traits, scale = F)#
#
(FGR.post <- dbFD(traits, t(community), calc.FGR=T))#
#
plot(as.dendrogram(hclust(dist(traits))))#
#
# Now simlate FD for genereting expected values for a certain number of species, for comparison with "real" observed values.#
#
runs = 1000#
results = matrix(nrow=runs, ncol=3)#
#
for(j in 1:runs){#
#
	community.random <- matrix(NA, nrow = 10, ncol = 3)#
	for(i in 1:3){#
		community.random[,i] <- sample(community[,i], 10, replace = F)#
		}	#
#
	rownames(community.random) <- letters[1:10]#
	colnames(community.random) <- make.names(paste("Community", 1:3))#
#
	results[j,] <- Calculate.FD(community.random, traits, scale=F)#
#
}#
#
# Red line shows observed value, histogram for expected values.#
#
par(mfrow=c(3,1))#
hist(results[,1], xlim = c(0, 15))#
abline(v = realFD[1], col = "red")#
#
hist(results[,2], xlim = c(0, 15))#
abline(v = realFD[2], col = "red")#
#
hist(results[,3], xlim = c(0, 15))#
abline(v = realFD[3], col = "red")
library(rstan)#
library(ggplot2)
srrs2 <- read.table ("~/Documents/git/gelmanhill/ARM_Data/radon/srrs2.dat", header=T, sep=",")
install.packages('rstan', depend=T)
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", dependencies = TRUE)
install.packages('rstan', dependencies = TRUE)
packs <- c('ade4', #
           'ape', #
           'arm',#
           'bbmle',#
           'car',#
           'cluster',#
           'FD',#
           'gdata',#
           'geometry', #
           'geoR',#
           'ggplot2',#
           'Hmisc',#
           'labdsv',#
           'lattice',#
           'lme4',#
           'maptools',#
           'nlme',#
           'picante',#
           'RCurl', #
           'reshape',#
           'rgl',#
           'RgoogleMaps',#
           'rpart', #
           'rstan',#
           'rgdal',#
           'RColorBrewer',#
           'sem',#
           'sp',#
           'vegan'#
           )#
#
for(i in packs){#
if(length(grep(i, (.packages(all.available=T))))==0) install.packages(i, dependencies =TRUE)#
}
library(arm)
srrs2 <- read.table ("~/Documents/git/gelmanhill/ARM_Data/radon/srrs2.dat", header=T, sep=",")#
mn <- srrs2$state=="MN"#
radon <- srrs2$activity[mn]#
log.radon <- log (ifelse (radon==0, .1, radon))#
floor <- srrs2$floor[mn]       # 0 for basement, 1 for first floor#
n <- length(radon)#
y <- log.radon#
x <- floor#
# get county index variable#
county.name <- as.vector(srrs2$county[mn])#
uniq <- unique(county.name)#
J <- length(uniq)#
county <- rep (NA, J)#
for (i in 1:J){#
  county[county.name==uniq[i]] <- i#
}#
 # no predictors#
ybarbar = mean(y)#
sample.size <- as.vector (table (county))
sample.size.jittered <- sample.size*exp (runif (J, -.1, .1))#
cty.mns = tapply(y,county,mean)#
cty.vars = tapply(y,county,var)#
cty.sds = mean(sqrt(cty.vars[!is.na(cty.vars)]))/sqrt(sample.size)#
cty.sds.sep = sqrt(tapply(y,county,var)/sample.size)#
## Get the county-level predictor#
srrs2.fips <- srrs2$stfips*1000 + srrs2$cntyfips#
cty <- read.table ("cty.dat", header=T, sep=",")#
usa.fips <- 1000*cty[,"stfips"] + cty[,"ctfips"]#
usa.rows <- match (unique(srrs2.fips[mn]), usa.fips)#
uranium <- cty[usa.rows,"Uppm"]#
u <- log (uranium)#
## Varying-intercept model w/ group-level predictors#
u.full <- u[county]#
dataList.3 <- list(N=length(y), y=y,x=x,county=county,u=u.full)#
radon_group.sf1 <- stan(file='radon_group.stan', data=dataList.3,#
                        iter=1000, chains=4)#
print(radon_group.sf1, pars = c("b","beta", "sigma", "lp__"))#
post1 <- extract(radon_group.sf1)#
post1.ranef <- colMeans(post1$const_coef)#
mean1.ranef <- mean(post1.ranef)#
post1.beta <- colMeans(post1$beta)#
post1.fixef1 <- mean(post1.ranef)#
## Plots on Figure 12.5#
dataList.4 <- list(N=length(y), y=y,x=x,county=county)#
radon_no_pool.sf1 <- stan(file='radon_no_pool.stan', data=dataList.4,#
                          iter=1000, chains=4)
library(RCpp)
library(Rcpp)
library(inline)
install.packages("inline",dep=T)
library(rstan)
install.packages('rstan',depend=T)
install.packages('vegan',depend=T)
library(vegan)
q()
install.package("rstan",depend=T)
install.packages("rstan",depend=T)
install.packages("vegan",depend=T)
library(inline)
library(vegan)
?install.packages
install.packages("Rcpp_0.12.0.tar.gz", repos = NULL)
¬
L
ll
install.packages("rstan")
install.packages("rstan",depend=T)
library(rstan)
install.packages(“rstan”, dep=T)
install.packages('rstan', dep=T)
library(rstan)
require(ggplot2)#
require(GGally)#install.packages("GGally",dep=T)#
require(reshape2)#
require(lme4)#
require(compiler)#
require(parallel)#
require(boot)
uire(boot)#
#
hdp <- read.csv("http://www.ats.ucla.edu/stat/data/hdp.csv")#
hdp <- within(hdp, {#
  Married <- factor(Married, levels = 0:1, labels = c("no", "yes"))#
  DID <- factor(DID)#
  HID <- factor(HID)#
})
head(hdp)
?within
ggpairs(hdp[, c("IL6", "CRP", "LengthofStay", "Experience")])
ggplot(hdp, aes(x = CancerStage, y = LengthofStay)) +
ggplot(hdp, aes(x = CancerStage, y = LengthofStay)) +#
  stat_sum(aes(size = ..n.., group = 1)) +#
  scale_size_area(max_size=10)
tmp <- melt(hdp[, c("CancerStage", "IL6", "CRP")], id.vars="CancerStage")#
ggplot(tmp, aes(x = CancerStage, y = value)) +#
  geom_jitter(alpha = .1) +#
  geom_violin(alpha = .75) +#
  facet_grid(variable ~ .) +#
  scale_y_sqrt()
tmp <- melt(hdp[, c("remission", "IL6", "CRP", "LengthofStay", "Experience")],#
  id.vars="remission")#
ggplot(tmp, aes(factor(remission), y = value, fill=factor(remission))) +#
  geom_boxplot() +#
  facet_wrap(~variable, scales="free_y")
glmer(remission ~ IL6 + CRP + CancerStage + LengthofStay + Experience + ( 1 | DID),#
	data = hdp, family = binomial)
m1 <- glmer(remission ~ IL6 + CRP + CancerStage + LengthofStay + Experience + ( 1 | DID),#
	data = hdp, family = binomial)
m1 <- glmer(remission ~ IL6 + CRP + CancerStage + LengthofStay + Experience + ( 1 | DID),#
	data = hdp, family = binomial,#
	control = glmerControl(optimizer = "bobyqa")#
	nAGQ = 10)
m1 <- glmer(remission ~ IL6 + CRP + CancerStage + LengthofStay + Experience + ( 1 | DID),#
	data = hdp, family = binomial,#
	control = glmerControl(optimizer = "bobyqa"),#
	nAGQ = 10) # fails to converge if controls are not set
m1
print(m1, corr=F)
?glmer
se <- sqrt(diag(vcov(m1))
se
se <- sqrt(diag(vcov(m1))
)
se
htemp <- read.csv("~/Documents/git/buds/analyses/data/hf155-02-15min.csv")
head(htemp)
tail(htemp)
htemp <- read.csv("~/Documents/git/buds/analyses/data/hf001-10-15min-m.csv")
head(htemp)
?as.POSIXct
as.POSIXlt(htemp$datetime[1:10], format = "%Y-%M-%dT%H:%M")
htemp$datetime <- as.POSIXlt(htemp$datetime, format = "%Y-%M-%dT%H:%M")
htemp$datetime > "2014-09-30"
htemp$datetime[1:10] > "2014-09-30"
htemp$datetime[nrow(htemp)] > "2014-09-30"
htemp <- htemp[htemp$datetime > "2014-09-30" & htemp$datetime < "2015-05-01",]
head(htemp)
head(tail)
tail(htemp)
library(gdata)#
d <- read.xls("~/Dropbox/Work/Harvard/Budburst Review/growthchambers_litreview_2015-12-13.xlsx", 2)
head(d)
d[327,]
d$status
d$Status
d[d$Status == "n", "Filename"]
tomove <- d[d$Status == "n", "Filename"]
tomove
paste("mv ~/Dropbox/Work/Harvard/Budburst Review/Budburst Refs", tomove, sep = "/")
paste("~/Dropbox/Work/Harvard/Budburst Review/Excluded Refs", tomove, sep = "/")
paste(paste("mv ~/Dropbox/Work/Harvard/Budburst Review/Budburst Refs", tomove, sep = "/"), #
				paste("~/Dropbox/Work/Harvard/Budburst Review/Excluded Refs", tomove, sep = "/"))
system(paste(paste("mv ~/Dropbox/Work/Harvard/Budburst Review/Budburst Refs", tomove, sep = "/"), #
				paste("~/Dropbox/Work/Harvard/Budburst Review/Excluded Refs", tomove, sep = "/"))#
				)
system(paste(paste("mv -i ~/Dropbox/Work/Harvard/Budburst Review/Budburst Refs", tomove, sep = "/"), #
				paste("~/Dropbox/Work/Harvard/Budburst Review/Excluded Refs", tomove, sep = "/"))#
				)
paste(paste("mv -i ~/Dropbox/Work/Harvard/Budburst Review/Budburst Refs", tomove, sep = "/"), #
				paste("~/Dropbox/Work/Harvard/Budburst Review/Excluded Refs", tomove, sep = "/"))
system(paste(paste("mv -i ~/Dropbox/Work/Harvard/Budburst Review/Budburst Refs", tomove, sep = "/"), #
				paste("~/Dropbox/Work/Harvard/Budburst Review/Excluded Refs", tomove, sep = "/"))#
				)
system(paste(paste("mv -n ~/Dropbox/Work/Harvard/Budburst Review/Budburst Refs", tomove, sep = "/"), #
				paste("~/Dropbox/Work/Harvard/Budburst Review/Excluded Refs", tomove, sep = "/"))#
				)
system("cd ~/Dropbox/Work/Harvard/Budburst Review/")
system("mv -n 'Budburst Refs/Miller_2004_ActaHort.pdf' 'Excluded Refs/Miller_2004_ActaHort.pdf'")
paste("mv -n '~/Dropbox/Work/Harvard/Budburst Review/Budburst Refs/", tomove, "'", sep = "")
system(paste(paste("mv -n '~/Dropbox/Work/Harvard/Budburst Review/Budburst Refs/", tomove, "'", sep = ""), #
				paste("'~/Dropbox/Work/Harvard/Budburst Review/Excluded Refs/", tomove, "'", sep = ""))#
				)
system("cd ~/Dropbox/Work/Harvard/Budburst Review/")
system(paste(paste("mv -n 'Budburst Refs/", tomove, "'", sep = ""), #
				paste("'Excluded Refs/", tomove, "'", sep = ""))#
				)
system(paste(paste("mv -n '~/Dropbox/Work/Harvard/Budburst_Review/Budburst_Refs/", tomove, "'", sep = ""), #
				paste("'~/Dropbox/Work/Harvard/Budburst_Review/Excluded_Refs/", tomove, "'", sep = ""))#
				)
system(paste(paste("mv ~/Dropbox/Work/Harvard/Budburst_Review/Budburst_Refs/", tomove, sep = ""), #
				paste("~/Dropbox/Work/Harvard/Budburst_Review/Excluded_Refs/", tomove, sep = ""))#
				)
# cleanup script for budburst review#
#
library(gdata)#
d <- read.xls("~/Dropbox/Work/Harvard/Budburst Review/growthchambers_litreview_2015-12-13.xlsx", 2)#
tomove <- d[d$Status == "n", "Filename"]
d <- read.xls("~/Dropbox/Work/Harvard/Budburst_Review/growthchambers_litreview_2015-12-13.xlsx", 2)
tomove <- d[d$Status == "n", "Filename"]
tomove
system(paste(paste("mv ~/Dropbox/Work/Harvard/Budburst_Review/Budburst_Refs/", tomove, sep = ""), #
				paste("~/Dropbox/Work/Harvard/Budburst_Review/Excluded_Refs/", tomove, sep = ""))#
				)
tomove <- d[d$Status == "n", "Filename"]#
#
for(i in length(tomove)){#
system(paste(paste("mv ~/Dropbox/Work/Harvard/Budburst_Review/Budburst_Refs/", tomove[i], sep = ""), #
				paste("~/Dropbox/Work/Harvard/Budburst_Review/Excluded_Refs/", tomove[i], sep = ""))#
				)#
				}
tomove
length(tomove)
tomove[i]
tomove <- d[d$Status == "n", "Filename"]#
#
for(i in 1:length(tomove)){#
system(paste(paste("mv ~/Dropbox/Work/Harvard/Budburst_Review/Budburst_Refs/", tomove[i], sep = ""), #
				paste("~/Dropbox/Work/Harvard/Budburst_Review/Excluded_Refs/", tomove[i], sep = ""))#
				)#
				}
head(d)
summary(d)
summary(d$Year)
hist(d$Year)
hist(d$Year, breaks = 20)
hist(d$Year, breaks = 25)
hist(d$Year, breaks = 50)
summary(d$Journal)
# Creating maps and assigning treatments for Budburst experiment 2016#
#
# This script checks treatment assignments and chamber locations for each cutting.#
setwd("~/Documents/git/budchill")#
#
library(gdata) # for read.xls#
d <- read.xls("~/Documents/git/budchill/Budburst Chill Datasheet 2016-01-04.xlsx")
allsp <- sort(unique(d[,"Species"]))
names(d)
allsp <- sort(unique(d[,"sp"]))
allsp
tapply(d$New.Treat, d$sp)
tapply(d$sp, d$New.Treat, length)
table(d$ind, d$New.Treat)
labs <- read.csv("~/Documents/git/budchill/design/Avery Labels 3per.csv")
labs$V4
rep(labs$V4, each = 3)
cat(rep(labs$V4, each = 3))
print(rep(labs$V4, each = 3))
write.csv(rep(labs$V4, each = 3), file="LabsTreat.csv")
# Creating maps and assigning treatments for Budburst experiment 2016#
#
# This script checks treatment assignments and chamber locations for each cutting.#
setwd("~/Documents/git/budchill")#
#
library(gdata) # for read.xls#
d <- read.xls("~/Documents/git/budchill/Budburst Chill Datasheet 2016-01-04.xlsx")#
#
allsp <- sort(unique(d[,"sp"]))#
# How many individuals are duplicated within new treatments?#
#
table(d$ind, d$New.Treat)
table(d$ind, d$New.Treat.2)
# Creating maps and assigning treatments for Budburst experiment 2016#
#
# This script checks treatment assignments and chamber locations for each cutting.#
setwd("~/Documents/git/budchill")#
#
library(gdata) # for read.xls#
d <- read.xls("~/Documents/git/budchill/Budburst Chill Datasheet 2016-01-04.xlsx")#
#
allsp <- sort(unique(d[,"sp"]))#
# How many individuals are duplicated within new treatments?#
#
table(d$ind, d$New.Treat)#
#
table(d$ind, d$New.Treat.2) # Should all be 1, mistake in randomization.
table(d$ind, d$Final.Treat)
summary(table(d$ind, d$New.Treat.2))
summary(as.vector(table(d$ind, d$New.Treat.2)))
tapply(as.vector(table(d$ind, d$New.Treat.2)))
summary(as.factor(as.vector(table(d$ind, d$New.Treat.2))))
summary(as.factor(as.vector(table(d$ind, d$Final.Treat)))) # should have as few 2 and 3 as possible
hsit(as.factor(as.vector(table(d$ind, d$Final.Treat)))) # at least now fewer than before
hist(as.factor(as.vector(table(d$ind, d$Final.Treat)))) # at least now fewer than before
hist(as.vector(table(d$ind, d$Final.Treat)))
hist(as.vector(table(d$ind, d$New.Treat.2)))
table(d$ind, d$Final.Treat)
table(d$sp, d$Final.Treat)
table(d$sp, d$Final.Treat)
summary(as.factor(as.vector(table(d$ind, d$New.Treat.2)))) # should have as few 2 and 3 as possible
table(d$ind, d$New.Treat.2) # Should all be 1, mistake in randomization.
# Creating maps and assigning treatments for Budburst experiment 2016#
#
# This script checks treatment assignments and chamber locations for each cutting.#
setwd("~/Documents/git/budchill")#
#
library(gdata) # for read.xls#
d <- read.xls("~/Documents/git/budchill/Budburst Chill Datasheet 2016-01-04.xlsx")#
#
allsp <- sort(unique(d[,"sp"]))#
# How many individuals are duplicated within new treatments?#
#
table(d$ind, d$New.Treat)#
#
table(d$ind, d$New.Treat.2) # Should all be 1, mistake in randomization.#
summary(as.factor(as.vector(table(d$ind, d$New.Treat.2)))) # should have as few 2 and 3 as possible#
#
table(d$ind, d$Final.Treat) # #
#
table(d$sp, d$Final.Treat) # #
#
summary(as.factor(as.vector(table(d$ind, d$Final.Treat)))) # at least now fewer than before#
hist(as.vector(table(d$ind, d$Final.Treat)))#
#
#labs <- read.csv("~/Documents/git/budchill/design/Avery Labels 3per.csv")#
#write.csv(rep(labs$V4, each = 3), file="LabsTreat.csv")
